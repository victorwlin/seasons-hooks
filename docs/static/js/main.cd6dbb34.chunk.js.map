{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js","useLocation.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","content","useState","setLat","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","ReactDOM","render","document","querySelector"],"mappings":"qJAGMA,G,KAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,sBACNC,SAAU,eAyBCE,EAbO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BdU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,SAC/C,8BAKRD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCRTG,EAAM,WAAO,IAGXC,EAHU,ECLH,WAAO,IAAD,EACKC,mBAAS,MADd,mBACVX,EADU,KACLY,EADK,OAEuBD,mBAAS,IAFhC,mBAEVE,EAFU,KAEIC,EAFJ,KAWjB,OAPAC,qBAAU,WACNC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAIR,EAAOQ,EAASC,OAAOC,aACnC,SAAAC,GAAG,OAAIT,EAAgBS,EAAIhB,cAEhC,IAEI,CAACP,EAAKa,GDLeW,GADd,mBACPxB,EADO,KACFa,EADE,KAYd,OAPIH,EADAG,EACU,uCAAaA,GAChBb,EACG,kBAAC,EAAD,CAAeA,IAAKA,IAEpB,kBAAC,EAAD,CAASO,QAAQ,qCAGxB,yBAAKF,UAAU,cAAcK,IAKxCe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.cd6dbb34.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\r\nimport React from \"react\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hit the beach!\",\r\n    iconName: \"sun\"\r\n  },\r\n  winter: {\r\n    text: \"Burr, it is chilly!\",\r\n    iconName: \"snowflake\"\r\n  }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    if (month > 2 && month < 9) {\r\n        return lat > 0 ? \"summer\" : \"winter\";\r\n    } else {\r\n        return lat > 0 ? \"winter\" : \"summer\";\r\n    }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season];\r\n\r\n    return (\r\n      <div className={`season-display ${season}`}>\r\n        <i className={`icon-left massive ${iconName} icon`} />\r\n        <h1>{text}</h1>\r\n        <i className={`icon-right massive ${iconName} icon`} />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default SeasonDisplay;","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        <p></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message: \"Loading...\"\r\n};\r\n\r\nexport default Spinner;","// Import the React and ReactDOM libraries\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\nimport useLocation from \"./useLocation\";\r\n\r\nconst App = () => {\r\n    const [lat, errorMessage] = useLocation();\r\n\r\n    let content;\r\n    if (errorMessage) {\r\n        content = <div>Error: {errorMessage}</div>;\r\n    } else if (lat) {\r\n        content = <SeasonDisplay lat={lat} />;\r\n    } else {\r\n        content = <Spinner message=\"Please allow location in browser\" />;\r\n    }\r\n\r\n    return <div className=\"border red\">{content}</div>;\r\n};\r\n\r\n  \r\n// Take the react component and show it on the screen\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));","import { useState, useEffect } from \"react\";\r\n\r\nexport default () => {\r\n    const [lat, setLat] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => setLat(position.coords.latitude),\r\n            err => setErrorMessage(err.message)\r\n        );\r\n    }, []);\r\n\r\n    return [lat, errorMessage];\r\n};"],"sourceRoot":""}